import csv
import subprocess
from pathlib import Path
from typing import List, Dict, Any


ROOT = Path(__file__).resolve().parents[1]
EXP_DIR = Path(__file__).resolve().parent
PLOTS_DIR = EXP_DIR / 'plots'


def read_csv_dict(path: Path) -> List[Dict[str, Any]]:
    if not path.exists():
        return []
    with open(path, 'r') as f:
        reader = csv.DictReader(f)
        return list(reader)


def ensure_plots():
    # generate SVG plots if missing
    need = [
        PLOTS_DIR / 'eval_val_loss.svg',
        PLOTS_DIR / 'timeseries_loss.svg',
        PLOTS_DIR / 'timeseries_attn_var.svg',
        PLOTS_DIR / 'timeseries_spec_q.svg',
        PLOTS_DIR / 'timeseries_spec_k.svg',
        PLOTS_DIR / 'timeseries_ortho_res.svg',
    ]
    if any(not p.exists() for p in need):
        subprocess.run(['python', str(EXP_DIR / 'plot_svg.py')], check=False)


def list_runs() -> List[str]:
    return sorted([p.stem.replace('timeseries_', '') for p in EXP_DIR.glob('timeseries_*.csv')])


def html_escape(s: str) -> str:
    return s.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')


def build_report() -> str:
    ensure_plots()
    runs = list_runs()
    summary_rows = read_csv_dict(EXP_DIR / 'summary.csv')

    css = """
    body { font-family: -apple-system, system-ui, Segoe UI, Roboto, Helvetica, Arial, sans-serif; margin: 20px; }
    h1, h2 { margin: 0 0 8px 0; }
    .section { margin-bottom: 24px; }
    table { border-collapse: collapse; width: 100%; }
    th, td { border: 1px solid #ddd; padding: 6px 8px; text-align: left; font-size: 14px; }
    th { background: #f6f6f6; }
    .small { color: #666; font-size: 12px; }
    .grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(320px, 1fr)); gap: 12px; }
    .card { border: 1px solid #ddd; padding: 8px; border-radius: 4px; }
    img, iframe { width: 100%; height: auto; border: 0; }
    .mono { font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace; }
    """

    html = [
        "<html><head><meta charset='utf-8'><title>Experiments Report</title>",
        f"<style>{css}</style></head><body>",
        "<h1>Experiments Report</h1>",
    ]

    # Summary table
    html.append("<div class='section'><h2>Summary</h2>")
    if summary_rows:
        cols = ['name','last_val_loss','last_train_loss','last_ortho_res_mean','last_attn_var_mean','last_spec_q_mean','last_spec_k_mean','last_grad_norm','grad_clipped_any','iters','mean_dt_ms']
        html.append("<table><tr>" + ''.join(f"<th>{c}</th>" for c in cols) + "</tr>")
        for r in summary_rows:
            html.append("<tr>" + ''.join(f"<td>{html_escape(str(r.get(c,'')))}</td>" for c in cols) + "</tr>")
        html.append("</table>")
    else:
        html.append("<div class='small'>No summary.csv found. Run experiments/runner.py first.</div>")
    html.append("</div>")

    # Plots
    html.append("<div class='section'><h2>Plots</h2>")
    plot_files = [
        ('Validation Loss', 'plots/eval_val_loss.svg'),
        ('Train Iter Loss', 'plots/timeseries_loss.svg'),
        ('Attention Variance', 'plots/timeseries_attn_var.svg'),
        ('Spec Norm Q', 'plots/timeseries_spec_q.svg'),
        ('Spec Norm K', 'plots/timeseries_spec_k.svg'),
        ('Orthogonality Residual', 'plots/timeseries_ortho_res.svg'),
    ]
    html.append("<div class='grid'>")
    for title, relpath in plot_files:
        fpath = EXP_DIR / relpath
        if fpath.exists():
            html.append(f"<div class='card'><div class='small'>{html_escape(title)}</div><img src='{relpath}' /></div>")
    html.append("</div></div>")

    # Per-run details
    html.append("<div class='section'><h2>Per-run CSV Links</h2>")
    if runs:
        html.append("<ul>")
        for name in runs:
            ts = f"timeseries_{name}.csv"
            ev = f"evals_{name}.csv"
            out = ROOT / f"out-exp-{name.replace('stiefel_qk','stiefel-qk').replace('stiefel_qko','stiefel-qko')}"
            html.append(
                f"<li><span class='mono'>{html_escape(name)}</span>: "
                f"<a href='{ts}'>timeseries</a> • <a href='{ev}'>evals</a> • "
                f"<span class='small'>out_dir:</span> <span class='mono'>{html_escape(str(out))}</span></li>"
            )
        html.append("</ul>")
    else:
        html.append("<div class='small'>No runs found in experiments/.</div>")
    html.append("</div>")

    # Footer
    html.append("<div class='small'>Generated by experiments/report.py</div>")
    html.append("</body></html>")
    return ''.join(html)


def main():
    PLOTS_DIR.mkdir(parents=True, exist_ok=True)
    html = build_report()
    out = EXP_DIR / 'report.html'
    out.write_text(html, encoding='utf-8')
    print(f"Report written to {out}")


if __name__ == '__main__':
    main()

